comm skill 	
alertness in class	
ability to apply concepts	
technical competence
self learning


 Vidit 	     - alertness
 Yuvashree   - 
 Mohd Jawwad - *** 
 Amrita
 Amey Singh
 Hemant *

		
		HARDWORK -> HARDWORK
		HARDWORK -> SMARTWORK
		SMARTWORK -> HARDWORK
		SMARTWORK -> SMARTWORK





				who
				| ??? <-- java developer
				|	database table creator
				|	html/angular author
				|	hibernate/spring
		--------------------------------------
			|		|
			where		when
			|space		|time
		----------------------------------------
		|		|		|
		why		what		how
		|		|		|
		reason		inFORMation	implementation
						|
					---------------------
					|		|
					success	<----- feedback
			








				

1 shweta
2 dibhahar
3 shreenavya
4 yuvashri
5 sahithi
6 akshita
7 tanishq
8 akhilesh
9 gelvesh


 select count(job),job,sum(sal)  <== COLUMN LIST
	from emp 		 <== TABLE LIST
	where job='CLERK' or job='MANAGER' or job='SALESMAN' <= CONDITION
	group by job 		 <== GROUP BY
	having count(job) >=4 	 <== HAVING
	order by job;		 <== ORDER BY




	DDL - DEFINITION - TABLE CREATE, ALTER, RENAME, TRUNCATE, DROP
	DML - INSERT/UPDATE/DELETE
	DQL - SELECT
	DCL - GRANT AND REVOKE
	TCL - commit,rollback and savepoint


	Nested queries

		queries within queries

			
		query1(
				query2
				(
					query3
				)
		       )

create view martinview as
select * from product
 where prodid in (
 select prodid from item 
 where ordid in 
	(select ordid from ord 
		where custid 
			=(select custid from customer 
			  where repid=
				(select empno from emp 
					where ename='MARTIN' 
				) 
			 ) 
	) and ordid=614				
 );
				



		JOIN

			JOINING TABLES TO FETCH MULTIPLE COLUMNS
			SPANNED ACROSS TABLES



	LAYER1	DATABASE				DEPT	   EMP
	LAYER2	CORE JAVA - POJO AS PER DATABASE TABLE  Department Employee ..
	LAYER3  JDBC - repository in hibernate/jpa
	LAYER4  Business Service Code - Airline/BusBooking/Employee management
	LAYER5  Spring Controller - web rest api
	LAYER6  Angular - SPA - Single Page Application - UI
	940 61  	13 groups ( 5 people )
	956

	1. NATURAL JOIN

			CARTESION PRODUCT

	2. EQUI JOIN

			EQUALITY CONDITION

	SELECT D.DEPTNO,DNAME,LOC, EMPNO,ENAME,JOB,SAL,E.DEPTNO
	FROM DEPT D, EMP E
	WHERE D.DEPTNO = E.DEPTNO;


	3. NON-EQUI
			NON EQUALITY CONDITION
	
	4. OUTER

			UNMATCHED ROWS 

		LEFT OUTER
			SELECT COLUMNLIST
			FROM TABLE1
			LEFT JOIN TABLE2
			ON TABLE1.COL = TABLE2.COL
		
			SELECT D.DEPTNO,DNAME,LOC, EMPNO,ENAME,JOB,SAL,E.DEPTNO
			FROM DEPT D
			LEFT JOIN EMP E
			ON D.DEPTNO = E.DEPTNO

		RIGHT OUTER	
			SELECT COLUMNLIST
			FROM TABLE1
			RIGHT JOIN TABLE2
			ON TABLE1.COL = TABLE2.COL

			SELECT D.DEPTNO,DNAME,LOC, EMPNO,ENAME,JOB,SAL,E.DEPTNO
			FROM DEPT D
			RIGHT JOIN EMP E
			ON D.DEPTNO = E.DEPTNO

		FULL OUTER

			SELECT COLUMNLIST
			FROM TABLE1
			FULL OUTER JOIN TABLE2
			ON TABLE1.COL = TABLE2.COL

			SELECT D.DEPTNO,DNAME,LOC, EMPNO,ENAME,JOB,SAL,E.DEPTNO
			FROM DEPT D
			FULL OUTER JOIN EMP E
			ON D.DEPTNO = E.DEPTNO



	SELECT * FROM A,B,C WHERE    2 CONDITIONS
		
	5. SELF 

SELECT B.EMPNO,B.ENAME,B.JOB,  E.EMPNO,E.ENAME,E.JOB FROM EMP B, EMP E
WHERE B.EMPNO = E.MGR;

				KING
				|7839
		---------------------------------------------------
		|				|		|
		BLAKE				CLARK		JONES
		|7698				|7782		|7566
	---------------------------------	------------- 	--------------
	|	|	|	|	|	|		|	|
	MARTIN	ALLEN	TURNER	JAMES	WARD	MILLER		FORD	SCOTT
			



CREATE TABLE EMP (
 EMPNO               NUMBER(4) NOT NULL,
 ENAME               VARCHAR2(10),
 JOB                 VARCHAR2(9),
 MGR                 NUMBER(4),
 HIREDATE            DATE,
 SAL                 NUMBER(7,2),
 COMM                NUMBER(7,2),
 DEPTNO              NUMBER(2)
)
INSERT INTO EMP VALUES (7839,'KING','PRESIDENT',NULL,'17-NOV-81',5000,NULL,10);
INSERT INTO EMP VALUES (7698,'BLAKE','MANAGER',7839,'1-MAY-81',2850,NULL,30);
INSERT INTO EMP VALUES (7782,'CLARK','MANAGER',7839,'9-JUN-81',2450,NULL,10);
INSERT INTO EMP VALUES (7566,'JONES','MANAGER',7839,'2-APR-81',2975,NULL,20);
INSERT INTO EMP VALUES (7654,'MARTIN','SALESMAN',7698,'28-SEP-81',1250,1400,30);
INSERT INTO EMP VALUES (7499,'ALLEN','SALESMAN',7698,'20-FEB-81',1600,300,30);
INSERT INTO EMP VALUES (7844,'TURNER','SALESMAN',7698,'8-SEP-81',1500,0,30);
INSERT INTO EMP VALUES (7900,'JAMES','CLERK',7698,'3-DEC-81',950,NULL,30);
INSERT INTO EMP VALUES (7521,'WARD','SALESMAN',7698,'22-FEB-81',1250,500,30);
INSERT INTO EMP VALUES (7902,'FORD','ANALYST',7566,'3-DEC-81',3000,NULL,20);
INSERT INTO EMP VALUES (7369,'SMITH','CLERK',7902,'17-DEC-80',800,NULL,20);
INSERT INTO EMP VALUES (7788,'SCOTT','ANALYST',7566,'09-DEC-82',3000,NULL,20);
INSERT INTO EMP VALUES (7876,'ADAMS','CLERK',7788,'12-JAN-83',1100,NULL,20);
INSERT INTO EMP VALUES (7934,'MILLER','CLERK',7782,'23-JAN-82',1300,NULL,10);

INSERT INTO EMP VALUES (111,'JACK','MANAGER',7782,'23-JAN-82',1300,NULL,NULL);



select d.dname,e.ename,c.name,o.orderdate,i.actualprice,i.qty,p.prodid from
dept d, emp e, customer c, ord o, item i, product p
where d.deptno = e.deptno
and   e.empno  = c.repid
and   c.custid = o.custid
and   o.ordid  = i.ordid
and   i.prodid = p.prodid
/

create view salesorder as
select d.dname,e.ename,c.name,o.orderdate,i.actualprice,i.qty,p.prodid from
dept d, emp e, customer c, ord o, item i, product p
where d.deptno = e.deptno
and   e.empno  = c.repid
and   c.custid = o.custid
and   o.ordid  = i.ordid
and   i.prodid = p.prodid
/

select c.name,o.orderdate,o.shipdate,o.total,i.actualprice,i.qty,p.prodid from
    customer c, ord o, item i, product p
    where
      c.custid = o.custid
    and   o.ordid  = i.ordid
   and   i.prodid = p.prodid

	/as sysdba

	DCL - data control language

		grant all privileges to USER

----------------------------------------------------------------------

fires autocommit
	|
	DDL		with 		Constraints
	|				|
	data defition			rules applied on the columns 

	1. create table
		create table myemployee( ........ )

	2. rename table
		 rename myemployee to youremployee;

	3. alter table 

		RENAME COLUMN
		alter table youremployee rename column comm to commision;

		REMOVE COLUMN
		alter table youremployee drop column commision

		alter table youremployee
		drop (salary,da); <-- drops both the columns

		ADD NEW COLUMN
		alter table youremployee	add hra varchar2(20);

		MODIFY COLUMN's data type
	 	alter table youremployee	 modify hra number;

	4. truncate table
		empty the table, removes the data which cannot be rollbacked
		
	5. drop table - alongwith the rows the structure is lost



	create table myemployee
	(
		empno number,
		ename  varchar2(20),  
		email  varchar2(20),
		joining date,
		gender  char(1),
		salary  number,
		comm    number
	);
		


	Constraints
	|	
	rules on the tables

		1. Integrity constraint - 
			primary key - unique + not null

		2. Unique constraint
			unique 
			null can be entered as many 

		3. Not null - domain constraint

		4. check constraint 
			check values 

		5. referential integrity constraints 
			foreign key

		6. default
			carry a default value (if not supplied by insert query)





		column level			table level 
		|				|
	alongwith the column definition		after the table completion
	



	create table myemp
	(
		empno number primary key,
		ename  varchar2(20) not null,  
		email  varchar2(20) unique,
		joining date check (joining < '01-Jan-2021' ),
		gender  char(1) default 'F',
		salary  number check (salary>5000),
		comm    number check (comm > 500),
		dno     number references dept(deptno)
	);



	 unique constraint (SCOTT.SYS_C0013926) violated  -- empno
	 cannot insert NULL into ("SCOTT"."MYEMP"."ENAME") -- null ename
	 unique constraint (SCOTT.SYS_C0013927) violated  -- email

 	 check constraint (SCOTT.SYS_C0013923) violated - joining
	 check constraint (SCOTT.SYS_C0013924) violated - salary
	 check constraint (SCOTT.SYS_C0013925) violated - comm
         
	integrity constraint (SCOTT.SYS_C0013928) violated - 
			parent key not found - deptno not found in dept
	
	select constraint_name, constraint_type, search_condition,status                     from user_constraints where table_name='MYEMP';    

insert into myemp (empno,ename,email,joining,salary,comm,dno) values (1238,'anjali','anjali@gmail.com','10-Nov-2020',7500,750,30);


    create table myemp3
    (
    	empno   number       CONSTRAINT myemp3_pk          primary key,
    	ename   varchar2(20) CONSTRAINT myemp3_en_nn       not null,
    	email   varchar2(20) CONSTRAINT myemp3_email_uq    unique,
    	joining date         CONSTRAINT myemp3_joining_chk check (joining < '01-Jan-2021' ),
    	gender  char(1)     			           default 'F',
	salary  number       CONSTRAINT myemp3_sal_chk     check (salary>5000),
	comm    number       CONSTRAINT myemp3_comm_chk    check (comm < 500),
   	dno     number       CONSTRAINT myemp3_dno_fk      references dept(deptno)
   );


insert into myemp3 values (1238,'anjali','anjali@gmail.com','10-Nov-2020','F',7500,750,30);





    create table myemp4
    (
    	empno   number ,
    	ename   varchar2(20) not null,
    	email   varchar2(20) ,
    	joining date ,
    	gender  char(1) default 'F',
    	salary  number ,
    	comm    number ,
   	dno     number ,
        primary key (empno),
	unique (email),
	check (joining < '01-Jan-2021' ),
	check (salary>5000),
	check (comm > 500),
	foreign key (dno) references dept(deptno)
    );

insert into myemp (empno,ename,email,joining,salary,comm,dno) values (1238,'anjali','anjali@gmail.com','10-Nov-2020',7500,750,30);


    create table myemp3
    (
    	empno   number ,
    	ename   varchar2(20) not null,
    	email   varchar2(20) ,
    	joining date ,
    	gender  char(1) default 'F',
    	salary  number ,
    	comm    number ,
   	dno     number ,
        primary key (empno),
	unique (email),
	check (joining < '01-Jan-2021' ),
	check (salary > 5000 ),
	check (comm < salary),
	foreign key (dno) references dept(deptno)
    );


			5 people 
			3 

	windows		mac
	|		|
	i3 4gb		i5 8gb     


				STS
	oracle	eclipse	 /  spring tool suite	postman		MS VS code
	|	|		|		|			|
	db	java		spring		test REST api		angular
	|
	layer1	layer2	layer3	   layer4   layer5			layer6

	i5 8gb/16gb





	1 TO ONE
		1 EMPLOYEE	1 PASSPORT
		1 BANKUSER	1 PANCARD
		1 CITIZEN	1 VOTING CARD
				
		
	1 TO MANY
		1 EMPLOYEE	MANY BANK ACCOUNTS
				MANY CARS
				MANY PROJECTS

	MANY TO MANY

		MANY EMPLOYEE	MANY PROJECTS





 create table myemp3
 (
    empno   number       CONSTRAINT myemp3_pk          primary key,
    ename   varchar2(20) CONSTRAINT myemp3_en_nn       not null,
    email   varchar2(20) CONSTRAINT myemp3_email_uq    unique,
    joining date         CONSTRAINT myemp3_joining_chk check (joining < '01-Jan-2021' ),
    gender  char(1)                default 'F',
    salary  number       CONSTRAINT myemp3_sal_chk     check (salary>5000),
    comm    number       CONSTRAINT myemp3_comm_chk    check (comm < 500),
    dno     number       CONSTRAINT myemp3_dno_fk      references dept(deptno)
   );

ALTER  TABLE NAME  ADD	CONSTRAINT CONSTRAINTNAME	CONSTRAINT TYPE
|	|    |       |     |		|		|
alter table myemp3 add CONSTRAINT myemp3_gender_chk check (gender in ('M','F'));

select constraint_name, constraint_type from user_constraints
    where table_name='MYEMP3';


	COMMIT - CHANGES DONE IN A TRANSACTION ARE PERMANENT

	ROLLBACK - REVERSES THE CHANGES TO THE LAST COMMIT POINT

	SAVEPOINT = TO SPECIFY A POINT IN OUR TRANSACTION TO WHICH LATER ONE CAN 
			ROLLBACK





	savepoint fundtansfer1;
		select bal from account where source=123; - debit 
		select bal from account where source=456; - credit
		update account set bal=bal-transferamt where source=123;
		update account set bal=bal+transferamt where source=456;
	
		
	savepoint fundtransfer2;
		select bal from account where source=789; - debit 
		select bal from account where source=667; - credit
		update account set bal=bal-transferamt where source=789;
		update account set bal=bal+transferamt where source=667;


	savepoint fundtransfer3;
		select bal from account where source=888; - debit 
		select bal from account where source=999; - credit
		update account set bal=bal-transferamt where source=888;
		update account set bal=bal+transferamt where source=999;
		
		rollback to fundtransfer3;







		SME - in comfortable  state
		|
		You - in comfortable  state
	
		brain = default state of the brain = uncomfortness

	difficult		intermediate		easy


	
		Knowledge ------> applied --------> WISDOM
		|
		useless







	create table emp
	(
	   empno ..
	   job  ..
	
	   unique(empno,job)
	)

		emp
	empno		job
	123		clerk
	123		clerk




		PL  SQL

		Procedural Language

				STORED PROCEDURES AND FUNCTIONS


		Sequence  - series of lines
		Selection - if condition
		Iteration - while loop and for loop 

	Abc.c			Abc.java			????

	C program		Java Program			PLSQL Program
	|			|				|
	main() {		main() {		
	  printf("hello");	  System.out.println("hello");	????
	}			}
	



		begin <----- same like a method begining
			your code
			your code
		end; <----- same like a method end


		ANNANYMOUS BLOCK - BLOCK WITH NAME 

declare
   x number:=10;
   y number:=20;
   z number:=30;
begin
   dbms_output.put_line('Outer begin of pl sql ');
   dbms_output.put_line('value of x ' || x );
   dbms_output.put_line('value of y ' || y );
   dbms_output.put_line('value of z ' || z );

	declare
		a number:=100;
	begin
	   dbms_output.put_line('Inner begin of pl sql ');
	   dbms_output.put_line('value of a ' || a );
	   dbms_output.put_line('value of x ' || x );
	   dbms_output.put_line('value of y ' || y );
	   dbms_output.put_line('value of z ' || z );
	   dbms_output.put_line('inner end of pl sql' );
	end;

   dbms_output.put_line('Outer end of pl sql' );
end;


=======================

declare
  2     x number;
  3     y varchar2(20);
  4     z varchar2(20);
  5  begin
  6     select deptno,dname,loc INTO x,y,z from dept where deptno=10;
  7     dbms_output.put_line('DEPARTMENT NUMBER : '|| x);
  8     dbms_output.put_line('DEPARTMENT NAME   : '|| y);
  9     dbms_output.put_line('DEPARTMENT LOC    : '|| z);
 10  end;
 11  /

===========================

   declare
       x number:='10';
       y dept.dname%type;
       z dept.loc%type;
    begin
       select deptno,dname,loc INTO x,y,z from dept where deptno=10;
       dbms_output.put_line('DEPARTMENT NUMBER : '|| x);
       dbms_output.put_line('DEPARTMENT NAME   : '|| y);
       dbms_output.put_line('DEPARTMENT LOC    : '|| z);
  end;
 /
====================

  1   declare
  2         x dept%rowtype;
  3      begin
  4         select * INTO x from dept where deptno=10;
  5         dbms_output.put_line('DEPARTMENT NUMBER : '|| x.deptno);
  6         dbms_output.put_line('DEPARTMENT NAME   : '|| x.dname);
  7         dbms_output.put_line('DEPARTMENT LOC    : '|| x.loc);
  8*   end;

==============================

 CREATE TABLE BANKACCOUNT
    (
       ACNO NUMBER PRIMARY KEY,
       ACNAME VARCHAR2(20) NOT NULL,
       ACBAL  NUMBER CHECK ( ACBAL >= 5000)
    );

insert into bankaccount values (101,'Jack',50000);
insert into bankaccount values (102,'Jane',60000);
insert into bankaccount values (103,'Julie',70000);
insert into bankaccount values (104,'Julia',80000);
insert into bankaccount values (105,'Joy',90000);


 create table transaction
    (
       tran_id number primary key,
       from_acc number references bankaccount(acno),
       to_acc number   references bankaccount(acno),
       tran_amount    number check (tran_amount>0),
       tran_type  varchar2(10) check (tran_type in('Debit','Credit')),
       source_bal number,
       ben_bal number,
      tran_date date
   );

	
insert into transaction values (trans_sequence.nextval,101,102,5000,'Debit',45000,65000,sysdate);


=====================
	
declare
       x number:=&source; 
       y number:=&target;
       transaction_amount number:=&amount;
       source_acc_balance number;
       ben_acc_balance number;
    begin
       dbms_output.put_line('Transfer in progress....');

       dbms_output.put_line('Fetching source balance....');
       select ACBAL into source_acc_balance from bankaccount where ACNO=x;
       dbms_output.put_line('Source balance....'||source_acc_balance);

      dbms_output.put_line('Fetching ben balance....');
      select ACBAL into ben_acc_balance from bankaccount where ACNO=y;
      dbms_output.put_line('Ben balance....'||ben_acc_balance);

      update bankaccount set ACBAL=ACBAL-transaction_amount where ACNO=x;
      update bankaccount set ACBAL=ACBAL+transaction_amount where ACNO=y;
      insert into transaction values (trans_sequence.nextval,x,y,transaction_amount,'Debit',source_acc_balance-transaction_amount,ben_acc_balance+transaction_amount,sysdate);

      dbms_output.put_line('Transfer successful.....');
      commit;
   end;
  /










